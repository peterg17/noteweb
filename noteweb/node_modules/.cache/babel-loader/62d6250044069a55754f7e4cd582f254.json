{"ast":null,"code":"var _jsxFileName = \"/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { InteractiveForceGraph } from 'react-vis-force'; // import { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      items: this.props.items.nodes.concat(this.props.items.links),\n      selectedNode: this.props.selectedNode\n    }; // this.network= <Graph\n    //   graph={this.state.graph}\n    //   options={this.options}\n    //   events={this.events}\n    // />;\n    // this.network = \n    // console.log(this.network.props.graph.nodes);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    /*\n    * Might help propogate state change down to child from parent\n    */\n    if (props.selectedNode !== state.selectedNode) {\n      console.log(\"poop\");\n      return {\n        items: props.items.nodes.concat(props.items.links),\n        selectedNode: props.selectedNode\n      };\n    }\n\n    console.log(\"peter\");\n    return null;\n  }\n\n  render() {\n    /**\n     * Renders the component\n     */\n    return React.createElement(\"div\", {\n      className: \"datascreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"datascreen-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(InteractiveForceGraph, {\n      simulationOptions: {\n        animate: true,\n        height: 800,\n        width: 800\n      },\n      zoomOptions: {\n        minScale: 200\n      },\n      labelAttr: \"label\",\n      onSelectNode: (event, node) => {\n        this.props.getNote(node.id);\n      },\n      selectedNode: this.state.selectedNode,\n      highlightDependencies: true,\n      showLabels: true,\n      zoom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.state.items)));\n  }\n\n}","map":{"version":3,"sources":["/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js"],"names":["React","Component","InteractiveForceGraph","DataScreen","constructor","props","console","log","state","items","nodes","concat","links","selectedNode","getDerivedStateFromProps","render","animate","height","width","minScale","event","node","getNote","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,0CAAP;AACA,SAASC,qBAAT,QAAqC,iBAArC,C,CACA;;AACA,OAAO,aAAP;AACA,OAAO,sCAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAChD;;;AAGAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAKG,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWI,KAAX,CAAiBC,KAAjB,CAAuBC,MAAvB,CAA8B,KAAKN,KAAL,CAAWI,KAAX,CAAiBG,KAA/C,CAAR;AAA+DC,MAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWQ;AAAxF,KAAb,CAHiB,CAIjB;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,SAAOC,wBAAP,CAAgCT,KAAhC,EAAuCG,KAAvC,EAA8C;AAC5C;;;AAGA,QAAIH,KAAK,CAACQ,YAAN,KAAuBL,KAAK,CAACK,YAAjC,EAA+C;AAC7CP,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAO;AACLE,QAAAA,KAAK,EAACJ,KAAK,CAACI,KAAN,CAAYC,KAAZ,CAAkBC,MAAlB,CAAyBN,KAAK,CAACI,KAAN,CAAYG,KAArC,CADD;AAELC,QAAAA,YAAY,EAAER,KAAK,CAACQ;AAFf,OAAP;AAID;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAO,IAAP;AACD;;AAIDQ,EAAAA,MAAM,GAAG;AACP;;;AAGA,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,qBAAD;AACE,MAAA,iBAAiB,EAAE;AAAEC,QAAAA,OAAO,EAAC,IAAV;AAAgBC,QAAAA,MAAM,EAAE,GAAxB;AAA6BC,QAAAA,KAAK,EAAE;AAApC,OADrB;AAEE,MAAA,WAAW,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAFf;AAGE,MAAA,SAAS,EAAC,OAHZ;AAIE,MAAA,YAAY,EAAE,CAACC,KAAD,EAAOC,IAAP,KAAgB;AACd,aAAKhB,KAAL,CAAWiB,OAAX,CAAmBD,IAAI,CAACE,EAAxB;AAA4B,OAL9C;AAME,MAAA,YAAY,EAAE,KAAKf,KAAL,CAAWK,YAN3B;AAOE,MAAA,qBAAqB,MAPvB;AAQE,MAAA,UAAU,MARZ;AASE,MAAA,IAAI,MATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWG,KAAKL,KAAL,CAAWC,KAXd,CADA,CADF,CADF;AAmBD;;AAzD+C","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { InteractiveForceGraph} from 'react-vis-force';\n// import { InteractiveForceGraph, ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {items: this.props.items.nodes.concat(this.props.items.links), selectedNode: this.props.selectedNode};\n    // this.network= <Graph\n    //   graph={this.state.graph}\n    //   options={this.options}\n    //   events={this.events}\n    // />;\n    // this.network = \n    // console.log(this.network.props.graph.nodes);\n  } \n  \n  static getDerivedStateFromProps(props, state) {\n    /*\n    * Might help propogate state change down to child from parent\n    */\n    if (props.selectedNode !== state.selectedNode) {\n      console.log(\"poop\");\n      return {\n        items:props.items.nodes.concat(props.items.links),\n        selectedNode: props.selectedNode\n      };\n    }\n    console.log(\"peter\");\n    return null;\n  }\n  \n  \n  \n  render() {\n    /**\n     * Renders the component\n     */\n    return (\n      <div className=\"datascreen\">\n        <div className=\"datascreen-content\">\n        <InteractiveForceGraph\n          simulationOptions={{ animate:true, height: 800, width: 800}}\n          zoomOptions={{ minScale: 200}}\n          labelAttr=\"label\"\n          onSelectNode={(event,node) => {\n                          this.props.getNote(node.id)}}\n          selectedNode={this.state.selectedNode}\n          highlightDependencies\n          showLabels\n          zoom\n        >\n          {this.state.items}\n        </InteractiveForceGraph>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}