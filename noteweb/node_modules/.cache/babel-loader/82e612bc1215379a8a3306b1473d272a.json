{"ast":null,"code":"var _jsxFileName = \"/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport Graph from 'react-graph-vis';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      graph: this.props.state.graph,\n      getnote: this.props.getNote\n    };\n    this.options = {\n      layout: {\n        hierarchical: false\n      },\n      edges: {\n        color: \"#FFFFFF\"\n      },\n      height: \"00px\"\n    };\n    this.events = {\n      select: event => {\n        var nodes = event.nodes,\n            edges = event.edges;\n        this.props.getNote(event.nodes[0]);\n      }\n    }; // Don't call this.setState() here!\n\n    this.state = {\n      items: this.props.state.items,\n      graph: this.props.state.graph\n    };\n    this.network = React.createElement(Graph, {\n      graph: this.state.graph,\n      options: this.options,\n      events: this.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n    console.log(this.network);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"got update!\");\n    this.network = React.createElement(Graph, {\n      graph: nextProps.state.graph,\n      options: this.options,\n      events: this.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    /**\n     * Renders the component\n     */\n    return React.createElement(\"div\", {\n      className: \"datascreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.network);\n  }\n\n}","map":{"version":3,"sources":["/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js"],"names":["React","Component","Network","Node","Edge","Graph","DataScreen","constructor","props","console","log","state","graph","getnote","getNote","options","layout","hierarchical","edges","color","height","events","select","event","nodes","items","network","componentWillReceiveProps","nextProps","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,0CAAP;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,QAAoC,mBAApC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAO,aAAP;AACA,OAAO,sCAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAChD;;;AAGAM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAKG,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC,KAAxB;AAA+BC,MAAAA,OAAO,EAAC,KAAKL,KAAL,CAAWM;AAAlD,KAAb;AAEA,SAAKC,OAAL,GAAe;AACbC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AADR,OADK;AAIbC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE;AADF,OAJM;AAObC,MAAAA,MAAM,EAAE;AAPK,KAAf;AAUA,SAAKC,MAAL,GAAc;AACZC,MAAAA,MAAM,EAAGC,KAAD,IAAW;AAAA,YACXC,KADW,GACMD,KADN,CACXC,KADW;AAAA,YACJN,KADI,GACMK,KADN,CACJL,KADI;AAEjB,aAAKV,KAAL,CAAWM,OAAX,CAAmBS,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAnB;AACD;AAJW,KAAd,CAfiB,CAqBjB;;AACA,SAAKb,KAAL,GAAa;AAACc,MAAAA,KAAK,EAAC,KAAKjB,KAAL,CAAWG,KAAX,CAAiBc,KAAxB;AAA+Bb,MAAAA,KAAK,EAAC,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC;AAAtD,KAAb;AACA,SAAKc,OAAL,GAAc,oBAAC,KAAD;AACZ,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,KADN;AAEZ,MAAA,OAAO,EAAE,KAAKG,OAFF;AAGZ,MAAA,MAAM,EAAE,KAAKM,MAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAKAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKgB,OAAjB;AACD;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnCnB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,SAAKgB,OAAL,GAAc,oBAAC,KAAD;AACZ,MAAA,KAAK,EAAEE,SAAS,CAACjB,KAAV,CAAgBC,KADX;AAEZ,MAAA,OAAO,EAAE,KAAKG,OAFF;AAGZ,MAAA,MAAM,EAAE,KAAKM,MAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAKD;;AAEDQ,EAAAA,MAAM,GAAG;AACP;;;AAGA,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,OADR,CADF;AAKD;;AArD+C","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport Graph from 'react-graph-vis'\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {graph:this.props.state.graph, getnote:this.props.getNote};\n    \n    this.options = {\n      layout: {\n        hierarchical: false\n      },\n      edges: {\n        color: \"#FFFFFF\"\n      },\n      height: \"00px\"\n    };\n   \n    this.events = {\n      select: (event) => {\n        var { nodes, edges } = event;\n        this.props.getNote(event.nodes[0]);\n      }\n    };\n    // Don't call this.setState() here!\n    this.state = {items:this.props.state.items, graph:this.props.state.graph};\n    this.network= <Graph\n      graph={this.state.graph}\n      options={this.options}\n      events={this.events}\n    />;\n    console.log(this.network)\n  } \n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"got update!\");\n    this.network= <Graph\n      graph={nextProps.state.graph}\n      options={this.options}\n      events={this.events}\n    />;\n  }\n  \n  render() {\n    /**\n     * Renders the component\n     */\n    return (\n      <div className=\"datascreen\">\n        {this.network}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}