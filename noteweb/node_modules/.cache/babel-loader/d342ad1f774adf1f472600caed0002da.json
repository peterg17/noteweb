{"ast":null,"code":"var _jsxFileName = \"/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Graph from 'react-graph-vis';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      graph: this.props.state.graph,\n      getnote: this.props.getNote\n    };\n    this.options = {\n      layout: {\n        hierarchical: false\n      },\n      edges: {\n        color: \"#FFFFFF\"\n      },\n      height: \"500px\"\n    };\n    this.events = {\n      select: event => {\n        var nodes = event.nodes,\n            edges = event.edges;\n        this.props.getNote(event.nodes[0]);\n      }\n    }; // Don't call this.setState() here!\n\n    this.state = {\n      items: this.props.state.items,\n      graph: this.props.state.graph\n    };\n    this.network = React.createElement(Graph, {\n      graph: this.state.graph,\n      options: this.options,\n      events: this.events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n    console.log(this.network.props.graph.nodes);\n  } // componentWillReceiveProps(nextProps) {\n  //   /*\n  //   * Might help propogate state change down to child from parent\n  //   */\n  //   console.log(\"1\")\n  //   console.log(nextProps);\n  //   console.log(\"2\")\n  //   console.log(nextProps.state.items);\n  //   this.setState({ items: nextProps.state.items});\n  //   console.log(\"3\")\n  //   console.log(this.state);\n  //   console.log(this.network);\n  // }\n\n\n  render() {\n    /**\n     * Renders the component\n     */\n    return React.createElement(\"div\", {\n      className: \"datascreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"HELLO\")), this.network, React.createElement(ForceGraph, {\n      zoom: true,\n      simulationOptions: {\n        height: 300,\n        width: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(ForceGraphNode, {\n      node: {\n        id: 'first-node'\n      },\n      fill: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(ForceGraphNode, {\n      node: {\n        id: 'second-node'\n      },\n      fill: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(ForceGraphLink, {\n      link: {\n        source: 'first-node',\n        target: 'second-node'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"line\", {\n      x1: 150,\n      y1: 0,\n      x2: 150,\n      y2: 300,\n      zoomable: true,\n      stroke: \"green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js"],"names":["React","Component","ForceGraph","ForceGraphNode","ForceGraphLink","Graph","DataScreen","constructor","props","console","log","state","graph","getnote","getNote","options","layout","hierarchical","edges","color","height","events","select","event","nodes","items","network","render","width","id","source","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,0CAAP;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,cAArC,QAA2D,iBAA3D;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAO,aAAP;AACA,OAAO,sCAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAChD;;;AAGAM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAKG,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC,KAAxB;AAA+BC,MAAAA,OAAO,EAAC,KAAKL,KAAL,CAAWM;AAAlD,KAAb;AAEA,SAAKC,OAAL,GAAe;AACbC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AADR,OADK;AAIbC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE;AADF,OAJM;AAObC,MAAAA,MAAM,EAAE;AAPK,KAAf;AAUA,SAAKC,MAAL,GAAc;AACZC,MAAAA,MAAM,EAAGC,KAAD,IAAW;AAAA,YACXC,KADW,GACMD,KADN,CACXC,KADW;AAAA,YACJN,KADI,GACMK,KADN,CACJL,KADI;AAEjB,aAAKV,KAAL,CAAWM,OAAX,CAAmBS,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAnB;AACD;AAJW,KAAd,CAfiB,CAqBjB;;AACA,SAAKb,KAAL,GAAa;AAACc,MAAAA,KAAK,EAAC,KAAKjB,KAAL,CAAWG,KAAX,CAAiBc,KAAxB;AAA+Bb,MAAAA,KAAK,EAAC,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC;AAAtD,KAAb;AACA,SAAKc,OAAL,GAAc,oBAAC,KAAD;AACZ,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,KADN;AAEZ,MAAA,OAAO,EAAE,KAAKG,OAFF;AAGZ,MAAA,MAAM,EAAE,KAAKM,MAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAKAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKgB,OAAL,CAAalB,KAAb,CAAmBI,KAAnB,CAAyBY,KAArC;AACD,GAjC+C,CAmChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIAG,EAAAA,MAAM,GAAG;AACP;;;AAGA,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,EAIG,KAAKD,OAJR,EAKE,oBAAC,UAAD;AAAY,MAAA,IAAI,MAAhB;AAAiB,MAAA,iBAAiB,EAAE;AAAEN,QAAAA,MAAM,EAAE,GAAV;AAAeQ,QAAAA,KAAK,EAAE;AAAtB,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAE;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAtB;AAA4C,MAAA,IAAI,EAAC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAE;AAAEA,QAAAA,EAAE,EAAE;AAAN,OAAtB;AAA6C,MAAA,IAAI,EAAC,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE,YAAV;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAM,MAAA,EAAE,EAAE,GAAV;AAAe,MAAA,EAAE,EAAE,CAAnB;AAAsB,MAAA,EAAE,EAAE,GAA1B;AAA+B,MAAA,EAAE,EAAE,GAAnC;AAAwC,MAAA,QAAQ,MAAhD;AAAiD,MAAA,MAAM,EAAC,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CALF,CADF;AAcD;;AArE+C","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport Graph from 'react-graph-vis'\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {graph:this.props.state.graph, getnote:this.props.getNote};\n    \n    this.options = {\n      layout: {\n        hierarchical: false\n      },\n      edges: {\n        color: \"#FFFFFF\"\n      },\n      height: \"500px\"\n    };\n   \n    this.events = {\n      select: (event) => {\n        var { nodes, edges } = event;\n        this.props.getNote(event.nodes[0]);\n      }\n    };\n    // Don't call this.setState() here!\n    this.state = {items:this.props.state.items, graph:this.props.state.graph};\n    this.network= <Graph\n      graph={this.state.graph}\n      options={this.options}\n      events={this.events}\n    />;\n    console.log(this.network.props.graph.nodes)\n  } \n  \n  // componentWillReceiveProps(nextProps) {\n  //   /*\n  //   * Might help propogate state change down to child from parent\n  //   */\n  //   console.log(\"1\")\n  //   console.log(nextProps);\n  //   console.log(\"2\")\n  //   console.log(nextProps.state.items);\n  //   this.setState({ items: nextProps.state.items});\n  //   console.log(\"3\")\n  //   console.log(this.state);\n  //   console.log(this.network);\n  // }\n  \n  \n  \n  render() {\n    /**\n     * Renders the component\n     */\n    return (\n      <div className=\"datascreen\">\n        <div>\n          <p>HELLO</p>\n        </div>\n        {this.network}\n        <ForceGraph zoom simulationOptions={{ height: 300, width: 300 }}>\n          <ForceGraphNode node={{ id: 'first-node' }} fill=\"red\" />\n          <ForceGraphNode node={{ id: 'second-node' }} fill=\"blue\" />\n          <ForceGraphLink link={{ source: 'first-node', target: 'second-node' }} />\n          <line x1={150} y1={0} x2={150} y2={300} zoomable stroke=\"green\" />\n        </ForceGraph>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}