{"ast":null,"code":"var _jsxFileName = \"/Users/victorfink/Documents/Projects/noteweb/src/NoteWeb.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NoteScreen from './NoteScreen.js';\nimport DataScreen from './DataScreen.js';\nimport TopBar from './TopBar.js';\nimport LeftBar from './LeftBar.js';\nexport default class NoteWeb extends Component {\n  /**\n   * This is the main application. Creates a network of nodes for note taking, rather than a linear set of notes. \n   * Will use machine learning on back end to automatically link notes to each other\n   */\n  constructor(props) {\n    /**\n     * Constructor for Noteweb application. Initializes nodes and edges for graph. initializes the state. binds functions. \n     */\n    super(props);\n    this.state = {\n      id: \"None\",\n      title: \"Title\",\n      note: \"This is where your note is displayed\"\n    }; // let nodes = [\n    //   <Node key=\"vader\" id= \"vader\" label=\"Darth Vader\" decorator={Decorator} content=\"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\"/>,\n    //   <Node key=\"luke\" id= \"luke\" label=\"Luke Skywalker\" decorator={Decorator} content=\"This is the Galaxy's only hope\"/>,\n    //   <Node key=\"leia\" id= \"leia\" label=\"Leia Organa\" decorator={Decorator} content=\"This is the girl who is always counted out but comes up big\"/>,\n    //   <Node key=\"han\" id= \"han\" label=\"Han Solo\" decorator={Decorator} content=\"What is this amateur hour\"/>,\n    //   <Node key=\"chewy\" id= \"chewy\" label=\"Chewbacca\" decorator={Decorator} content=\"Ahhhhhhhhhhhhh\"/>,\n    //   <Node key=\"obi\" id= \"obi\" label=\"Obi-Wan Kenobi\" decorator={Decorator} content=\"Why did you try it Anakin? I had the high ground. And I've used that exact trick on Darth Maul which I must have told you about. Did you think I wouldn't see that shit coming? Come on young padawan.\"/>,\n    //   <Node key=\"greedo\" id= \"greedo\" label=\"Greedo\" decorator={Decorator} content=\"The green guy who was just too slow for Han Solo. Or was I innacurate? Did I shoot or not? Idk George Lucas keeps editing my only scene\"/>,\n    //   <Node key=\"yoda\" id= \"yoda\" label=\"Yoda\" decorator={Decorator} content=\"That baby me am not. Look nothing like him, I did. More handsome I am.\"/>,\n    //   <Node key=\"boba\" id= \"boba\" label=\"Boba Fett\" decorator={Decorator} content=\"Still being digested to this day in The Great Pit of Carkoon\"/>,\n    //   <Node key=\"jabba\" id= \"jabba\" label=\"Jabba The Hutt\" decorator={Decorator} content=\"Me want solo on my wall\"/>,\n    //   <Node key=\"lando\" id= \"lando\" label=\"Lando Calrissian\" decorator={Decorator} content=\"I'm in it for the money, and the women, and the greater good, but definitely the money\"/>,\n    //   <Node key=\"emporer\" id= \"emporer\" label=\"Emporer Palpatine\" decorator={Decorator} content=\"This is the Dark Lord of the Sith\"/>\n    // ];\n    // let edges = [\n    //   <Edge key=\"0\" id= \"0\" from=\"yoda\" to=\"chewy\" />,\n    //   <Edge key=\"1\" id= \"1\" from=\"vader\" to=\"luke\" />,\n    //   <Edge key=\"2\" id= \"2\" from=\"vader\" to=\"leia\" />,\n    //   <Edge key=\"3\" id= \"3\" from=\"han\" to=\"leia\" />,\n    //   <Edge key=\"4\" id= \"4\" from=\"han\" to=\"chewy\" />,\n    //   <Edge key=\"5\" id= \"5\" from=\"obi\" to=\"luke\" />,\n    //   <Edge key=\"6\" id= \"6\" from=\"leia\" to=\"luke\" />,\n    //   <Edge key=\"7\" id= \"7\" from=\"vader\" to=\"obi\" />,\n    //   <Edge key=\"8\" id= \"8\" from=\"obi\" to=\"yoda\" />,\n    //   <Edge key=\"9\" id= \"9\" from=\"vader\" to=\"yoda\" />,\n    //   <Edge key=\"10\" id= \"10\" from=\"jabba\" to=\"han\" />,\n    //   <Edge key=\"11\" id= \"11\" from=\"jabba\" to=\"boba\" />,\n    //   <Edge key=\"12\" id= \"12\" from=\"boba\" to=\"han\" />,\n    //   <Edge key=\"13\" id= \"13\" from=\"han\" to=\"greedo\" />,\n    //   <Edge key=\"14\" id= \"14\" from=\"jabba\" to=\"greedo\" />,\n    //   <Edge key=\"15\" id= \"15\" from=\"yoda\" to=\"luke\" />,\n    //   <Edge key=\"16\" id= \"16\" from=\"emporer\" to=\"vader\" />,\n    //   <Edge key=\"17\" id= \"17\" from=\"emporer\" to=\"luke\" />,\n    //   <Edge key=\"18\" id= \"18\" from=\"lando\" to=\"han\" />\n    // ];\n\n    let nodes = [{\n      key: \"node0\",\n      id: \"0\",\n      label: \"Darth Vader\",\n      content: \"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\",\n      created: new Date().getTime()\n    }, {\n      key: \"node1\",\n      id: \"1\",\n      label: \"Emporer Palpatine\",\n      content: \"This is the Dark Lord of the Sith\",\n      created: new Date().getTime()\n    }, {\n      key: \"node2\",\n      id: \"2\",\n      label: \"Luke Skywalker\",\n      content: \"This is the Galaxy's only hope.\",\n      created: new Date().getTime()\n    }, {\n      key: \"node3\",\n      id: \"3\",\n      label: \"Leia Organa\",\n      content: \"This is the girl who is always counted out but comes up big.\",\n      created: new Date().getTime()\n    }, {\n      key: \"node4\",\n      id: \"4\",\n      label: \"Han Solo\",\n      content: \"What is this amateur hour?\",\n      created: new Date().getTime()\n    }, {\n      key: \"node5\",\n      id: \"5\",\n      label: \"Chewbacca\",\n      content: \"Ahhhhhhhhhhhhh!\",\n      created: new Date().getTime()\n    }, {\n      key: \"node6\",\n      id: \"6\",\n      label: \"Obi-Wan Kenobi\",\n      content: \"Why did you try it Anakin? I had the high ground. And I've used that exact trick on Darth Maul which I must have told you about. Did you think I wouldn't see that shit coming? Come on young padawan.\",\n      created: new Date().getTime()\n    }, {\n      key: \"node7\",\n      id: \"7\",\n      label: \"Greedo\",\n      content: \"The green guy who was just too slow for Han Solo. Or was I innacurate? Did I shoot or not? Idk George Lucas keeps editing my only scene\",\n      created: new Date().getTime()\n    }, {\n      key: \"node8\",\n      id: \"8\",\n      label: \"Yoda\",\n      content: \"That baby me am not. Look nothing like him, I did. More handsome I am.\",\n      created: new Date().getTime()\n    }, {\n      key: \"node9\",\n      id: \"9\",\n      label: \"Boba Fett\",\n      content: \"Still being digested to this day in The Great Pit of Carkoon\",\n      created: new Date().getTime()\n    }, {\n      key: \"node10\",\n      id: \"10\",\n      label: \"Jabba The Hutt\",\n      content: \"Me want solo on my wall.\",\n      created: new Date().getTime()\n    }, {\n      key: \"node11\",\n      id: \"11\",\n      label: \"Lando Calrissian\",\n      content: \"I'm in it for the money, and the women, and the greater good, but definitely the money.\",\n      created: new Date().getTime()\n    }];\n    let edges = [{\n      key: \"edge0\",\n      id: \"0\",\n      from: \"8\",\n      to: \"5\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge1\",\n      id: \"1\",\n      from: \"0\",\n      to: \"2\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge2\",\n      id: \"2\",\n      from: \"0\",\n      to: \"3\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge3\",\n      id: \"3\",\n      from: \"4\",\n      to: \"3\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge4\",\n      id: \"4\",\n      from: \"4\",\n      to: \"5\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge5\",\n      id: \"5\",\n      from: \"6\",\n      to: \"2\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge6\",\n      id: \"6\",\n      from: \"3\",\n      to: \"2\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge7\",\n      id: \"7\",\n      from: \"0\",\n      to: \"6\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge8\",\n      id: \"8\",\n      from: \"6\",\n      to: \"8\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge9\",\n      id: \"9\",\n      from: \"0\",\n      to: \"8\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge10\",\n      id: \"10\",\n      from: \"10\",\n      to: \"4\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge11\",\n      id: \"11\",\n      from: \"10\",\n      to: \"9\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge12\",\n      id: \"12\",\n      from: \"9\",\n      to: \"4\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge13\",\n      id: \"13\",\n      from: \"4\",\n      to: \"7\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge14\",\n      id: \"14\",\n      from: \"10\",\n      to: \"7\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge15\",\n      id: \"15\",\n      from: \"8\",\n      to: \"2\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge16\",\n      id: \"16\",\n      from: \"1\",\n      to: \"0\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge17\",\n      id: \"17\",\n      from: \"1\",\n      to: \"2\",\n      created: new Date().getTime()\n    }, {\n      key: \"edge18\",\n      id: \"18\",\n      from: \"11\",\n      to: \"4\",\n      created: new Date().getTime()\n    }];\n    let graph = {\n      nodes: nodes,\n      edges: edges\n    };\n    let thisItem = graph.nodes[0];\n    this.state = {\n      id: thisItem.id,\n      title: thisItem.label,\n      note: thisItem.content,\n      nodes: nodes,\n      edges: edges,\n      graph: graph\n    }; // this.state = {id: thisItem.props.id,  title: thisItem.props.label, note: thisItem.props.content, nodes: nodes, edges: edges, items:items, graph:{nodes:nodes, edges:edges}};\n\n    this.setNote = this.setNote.bind(this);\n    this.setTitle = this.setTitle.bind(this);\n    this.getNote = this.getNote.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.computeItems = this.computeItems.bind(this);\n  }\n\n  getNote(newId) {\n    /**\n     * Retreives the contents of a note and displays the contents in the NoteScreen \n     */\n    console.log(\"get\"); // let stateCopy = JSON.parse(JSON.stringify(this.state));\n\n    let stateCopy = Object.assign({}, this.state);\n    let newNode = stateCopy.nodes.find(x => x.id === newId);\n    let graph = this.computeItems(newId, stateCopy.nodes, stateCopy.edges);\n    this.setState(state => ({\n      id: newNode.id,\n      title: newNode.label,\n      note: newNode.content,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges,\n      graph: graph\n    }));\n  }\n\n  computeItems(id, nodes, edges) {\n    /**\n     * Computes the new graph to be \n     */\n    let graph = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.push(nodes.find(x => x.id === id));\n\n    for (let i = 0; i < edges.length; i++) {\n      if (edges[i].from === id) {\n        graph.edges.push(edges[i]);\n        graph.nodes.push(nodes.find(x => x.id === edges[i].to));\n      } else if (edges[i].to === id) {\n        graph.edges.push(edges[i]);\n        graph.nodes.push(nodes.find(x => x.id === edges[i].from));\n      }\n    }\n\n    return graph;\n  }\n\n  addNote() {\n    /**\n     * Adds a new node to the network \n     */\n    console.log(\"add\");\n    let title = \"New Note\";\n    let note = \"What's on your mind?\";\n    let stateCopy = Object.assign({}, this.state);\n    let nodeId = (parseInt(stateCopy.nodes.slice(-1)[0].id) + 1).toString();\n    let edgeId = (parseInt(stateCopy.edges.slice(-1)[0].id) + 1).toString();\n    stateCopy.nodes.push({\n      key: \"node\" + nodeId,\n      id: nodeId,\n      label: title,\n      content: note,\n      created: new Date().getTime()\n    });\n    stateCopy.edges.push({\n      key: \"edge\" + edgeId,\n      id: edgeId,\n      to: nodeId,\n      from: stateCopy.id,\n      created: new Date().getTime()\n    });\n    let graph = this.computeItems(nodeId, stateCopy.nodes, stateCopy.edges);\n    this.setState(state => ({\n      id: nodeId,\n      title: title,\n      note: note,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges,\n      graph: graph\n    }));\n  }\n\n  resetGraph() {\n    /**\n     * resets the graph and displays all nodes\n     */\n    console.log(\"reset\"); // let stateCopy = JSON.parse(JSON.stringify(this.state));\n\n    let stateCopy = Object.assign({}, this.state);\n    let graph = {\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges\n    };\n    this.setState(state => ({\n      id: stateCopy.id,\n      title: stateCopy.title,\n      note: stateCopy.note,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges,\n      graph: graph\n    }));\n  }\n\n  setNote(newNote) {\n    /**\n     * Sets the note content of the selected node\n     */\n    console.log(\"set\"); // let stateCopy = JSON.parse(JSON.stringify(this.state));\n\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.nodes.find(x => x.id === stateCopy.id).content = newNote;\n    this.setState(state => ({\n      id: stateCopy.id,\n      title: stateCopy.title,\n      note: newNote,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges,\n      graph: stateCopy.graph\n    }));\n  }\n\n  setTitle(newTitle) {\n    /**\n     * Sets the note label of the selected node \n     */\n    console.log(\"set\"); // let stateCopy = JSON.parse(JSON.stringify(this.state));\n\n    let stateCopy = Object.assign({}, this.state);\n    let nodeCopy = Object.assign({}, this.state.nodes.find(x => x.id === stateCopy.id));\n    stateCopy.nodes.filter(x => x.id != stateCopy.id);\n    stateCopy.nodes.push({\n      id: nodeCopy.id,\n      key: nodeCopy.key,\n      label: newTitle,\n      constent: nodeCopy.content,\n      created: nodeCopy.created\n    });\n    this.setState(state => ({\n      id: stateCopy.id,\n      title: newTitle,\n      note: stateCopy.note,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges,\n      graph: stateCopy.graph\n    }));\n  }\n\n  render() {\n    /**\n     * Renders the component\n     */\n    return React.createElement(\"div\", {\n      className: \"note-web\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(TopBar, {\n      key: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"main-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(LeftBar, {\n      key: \"left\",\n      getNote: this.getNote,\n      addNote: this.addNote,\n      state: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(DataScreen, {\n      key: \"data\",\n      state: this.state,\n      getNote: this.getNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(NoteScreen, {\n      key: \"note\",\n      state: this.state,\n      setNote: this.setNote,\n      setTitle: this.setTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/victorfink/Documents/Projects/noteweb/src/NoteWeb.js"],"names":["React","Component","NoteScreen","DataScreen","TopBar","LeftBar","NoteWeb","constructor","props","state","id","title","note","nodes","key","label","content","created","Date","getTime","edges","from","to","graph","thisItem","setNote","bind","setTitle","getNote","addNote","computeItems","newId","console","log","stateCopy","Object","assign","newNode","find","x","setState","push","i","length","nodeId","parseInt","slice","toString","edgeId","resetGraph","newNote","newTitle","nodeCopy","filter","constent","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NoteScreen from './NoteScreen.js'\nimport DataScreen from './DataScreen.js'\nimport TopBar from './TopBar.js'\nimport LeftBar from './LeftBar.js'\n\nexport default class NoteWeb extends Component {\n  /**\n   * This is the main application. Creates a network of nodes for note taking, rather than a linear set of notes. \n   * Will use machine learning on back end to automatically link notes to each other\n   */\n  constructor(props) {\n  /**\n   * Constructor for Noteweb application. Initializes nodes and edges for graph. initializes the state. binds functions. \n   */\n    super(props);\n    this.state = {id: \"None\",  title: \"Title\", note: \"This is where your note is displayed\"};\n    // let nodes = [\n    //   <Node key=\"vader\" id= \"vader\" label=\"Darth Vader\" decorator={Decorator} content=\"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\"/>,\n    //   <Node key=\"luke\" id= \"luke\" label=\"Luke Skywalker\" decorator={Decorator} content=\"This is the Galaxy's only hope\"/>,\n    //   <Node key=\"leia\" id= \"leia\" label=\"Leia Organa\" decorator={Decorator} content=\"This is the girl who is always counted out but comes up big\"/>,\n    //   <Node key=\"han\" id= \"han\" label=\"Han Solo\" decorator={Decorator} content=\"What is this amateur hour\"/>,\n    //   <Node key=\"chewy\" id= \"chewy\" label=\"Chewbacca\" decorator={Decorator} content=\"Ahhhhhhhhhhhhh\"/>,\n    //   <Node key=\"obi\" id= \"obi\" label=\"Obi-Wan Kenobi\" decorator={Decorator} content=\"Why did you try it Anakin? I had the high ground. And I've used that exact trick on Darth Maul which I must have told you about. Did you think I wouldn't see that shit coming? Come on young padawan.\"/>,\n    //   <Node key=\"greedo\" id= \"greedo\" label=\"Greedo\" decorator={Decorator} content=\"The green guy who was just too slow for Han Solo. Or was I innacurate? Did I shoot or not? Idk George Lucas keeps editing my only scene\"/>,\n    //   <Node key=\"yoda\" id= \"yoda\" label=\"Yoda\" decorator={Decorator} content=\"That baby me am not. Look nothing like him, I did. More handsome I am.\"/>,\n    //   <Node key=\"boba\" id= \"boba\" label=\"Boba Fett\" decorator={Decorator} content=\"Still being digested to this day in The Great Pit of Carkoon\"/>,\n    //   <Node key=\"jabba\" id= \"jabba\" label=\"Jabba The Hutt\" decorator={Decorator} content=\"Me want solo on my wall\"/>,\n    //   <Node key=\"lando\" id= \"lando\" label=\"Lando Calrissian\" decorator={Decorator} content=\"I'm in it for the money, and the women, and the greater good, but definitely the money\"/>,\n    //   <Node key=\"emporer\" id= \"emporer\" label=\"Emporer Palpatine\" decorator={Decorator} content=\"This is the Dark Lord of the Sith\"/>\n    // ];\n    // let edges = [\n    //   <Edge key=\"0\" id= \"0\" from=\"yoda\" to=\"chewy\" />,\n    //   <Edge key=\"1\" id= \"1\" from=\"vader\" to=\"luke\" />,\n    //   <Edge key=\"2\" id= \"2\" from=\"vader\" to=\"leia\" />,\n    //   <Edge key=\"3\" id= \"3\" from=\"han\" to=\"leia\" />,\n    //   <Edge key=\"4\" id= \"4\" from=\"han\" to=\"chewy\" />,\n    //   <Edge key=\"5\" id= \"5\" from=\"obi\" to=\"luke\" />,\n    //   <Edge key=\"6\" id= \"6\" from=\"leia\" to=\"luke\" />,\n    //   <Edge key=\"7\" id= \"7\" from=\"vader\" to=\"obi\" />,\n    //   <Edge key=\"8\" id= \"8\" from=\"obi\" to=\"yoda\" />,\n    //   <Edge key=\"9\" id= \"9\" from=\"vader\" to=\"yoda\" />,\n    //   <Edge key=\"10\" id= \"10\" from=\"jabba\" to=\"han\" />,\n    //   <Edge key=\"11\" id= \"11\" from=\"jabba\" to=\"boba\" />,\n    //   <Edge key=\"12\" id= \"12\" from=\"boba\" to=\"han\" />,\n    //   <Edge key=\"13\" id= \"13\" from=\"han\" to=\"greedo\" />,\n    //   <Edge key=\"14\" id= \"14\" from=\"jabba\" to=\"greedo\" />,\n    //   <Edge key=\"15\" id= \"15\" from=\"yoda\" to=\"luke\" />,\n    //   <Edge key=\"16\" id= \"16\" from=\"emporer\" to=\"vader\" />,\n    //   <Edge key=\"17\" id= \"17\" from=\"emporer\" to=\"luke\" />,\n    //   <Edge key=\"18\" id= \"18\" from=\"lando\" to=\"han\" />\n    // ];\n    let nodes = [\n      { key: \"node0\", id: \"0\", label: \"Darth Vader\", content: \"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\", created:new Date().getTime()},\n      { key: \"node1\", id: \"1\", label: \"Emporer Palpatine\" , content: \"This is the Dark Lord of the Sith\", created:new Date().getTime() },\n      { key: \"node2\", id: \"2\", label: \"Luke Skywalker\" , content: \"This is the Galaxy's only hope.\", created:new Date().getTime()},\n      { key: \"node3\", id: \"3\", label: \"Leia Organa\", content: \"This is the girl who is always counted out but comes up big.\", created:new Date().getTime()},\n      { key: \"node4\", id: \"4\", label: \"Han Solo\" , content: \"What is this amateur hour?\", created:new Date().getTime() },\n      { key: \"node5\", id: \"5\", label: \"Chewbacca\", content: \"Ahhhhhhhhhhhhh!\", created:new Date().getTime()},\n      { key: \"node6\", id: \"6\", label: \"Obi-Wan Kenobi\" , content: \"Why did you try it Anakin? I had the high ground. And I've used that exact trick on Darth Maul which I must have told you about. Did you think I wouldn't see that shit coming? Come on young padawan.\", created:new Date().getTime() },\n      { key: \"node7\", id: \"7\", label: \"Greedo\", content: \"The green guy who was just too slow for Han Solo. Or was I innacurate? Did I shoot or not? Idk George Lucas keeps editing my only scene\", created:new Date().getTime()},\n      { key: \"node8\", id: \"8\", label: \"Yoda\" , content: \"That baby me am not. Look nothing like him, I did. More handsome I am.\", created:new Date().getTime() },\n      { key: \"node9\", id: \"9\", label: \"Boba Fett\", content: \"Still being digested to this day in The Great Pit of Carkoon\", created:new Date().getTime()},\n      { key: \"node10\", id: \"10\", label: \"Jabba The Hutt\" , content: \"Me want solo on my wall.\", created:new Date().getTime() },\n      { key: \"node11\", id: \"11\", label: \"Lando Calrissian\", content: \"I'm in it for the money, and the women, and the greater good, but definitely the money.\", created:new Date().getTime()}\n    ]\n    \n    let edges = [\n      { key: \"edge0\", id: \"0\", from:\"8\", to:\"5\", created:new Date().getTime()},\n      { key: \"edge1\", id: \"1\", from:\"0\", to:\"2\", created:new Date().getTime()},\n      { key: \"edge2\", id: \"2\", from:\"0\", to:\"3\", created:new Date().getTime()},\n      { key: \"edge3\", id: \"3\", from:\"4\", to:\"3\", created:new Date().getTime()},\n      { key: \"edge4\", id: \"4\", from:\"4\", to:\"5\", created:new Date().getTime()},\n      { key: \"edge5\", id: \"5\", from:\"6\", to:\"2\", created:new Date().getTime()},\n      { key: \"edge6\", id: \"6\", from:\"3\", to:\"2\", created:new Date().getTime()},\n      { key: \"edge7\", id: \"7\", from:\"0\", to:\"6\", created:new Date().getTime()},\n      { key: \"edge8\", id: \"8\", from:\"6\", to:\"8\", created:new Date().getTime()},\n      { key: \"edge9\", id: \"9\", from:\"0\", to:\"8\", created:new Date().getTime()},\n      { key: \"edge10\", id: \"10\", from:\"10\", to:\"4\", created:new Date().getTime()},\n      { key: \"edge11\", id: \"11\", from:\"10\", to:\"9\", created:new Date().getTime()},\n      { key: \"edge12\", id: \"12\", from:\"9\", to:\"4\", created:new Date().getTime()},\n      { key: \"edge13\", id: \"13\", from:\"4\", to:\"7\", created:new Date().getTime()},\n      { key: \"edge14\", id: \"14\", from:\"10\", to:\"7\", created:new Date().getTime()},\n      { key: \"edge15\", id: \"15\", from:\"8\", to:\"2\", created:new Date().getTime()},\n      { key: \"edge16\", id: \"16\", from:\"1\", to:\"0\", created:new Date().getTime()},\n      { key: \"edge17\", id: \"17\", from:\"1\", to:\"2\", created:new Date().getTime()},\n      { key: \"edge18\", id: \"18\", from:\"11\", to:\"4\", created:new Date().getTime()}\n    ]\n    let graph = {nodes:nodes,edges:edges};\n    let thisItem = graph.nodes[0];\n    this.state = {id: thisItem.id,  title: thisItem.label, note: thisItem.content, nodes: nodes, edges: edges, graph:graph};\n    // this.state = {id: thisItem.props.id,  title: thisItem.props.label, note: thisItem.props.content, nodes: nodes, edges: edges, items:items, graph:{nodes:nodes, edges:edges}};\n    this.setNote = this.setNote.bind(this);\n    this.setTitle = this.setTitle.bind(this);\n    this.getNote = this.getNote.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.computeItems = this.computeItems.bind(this);\n  }\n  \n  getNote(newId){\n    /**\n     * Retreives the contents of a note and displays the contents in the NoteScreen \n     */\n    console.log(\"get\")\n    // let stateCopy = JSON.parse(JSON.stringify(this.state));\n    let stateCopy = Object.assign({}, this.state);\n    let newNode = stateCopy.nodes.find(x => x.id === newId);\n    let graph = this.computeItems(newId, stateCopy.nodes, stateCopy.edges);\n    this.setState(state => ({\n        id:newNode.id,\n        title: newNode.label,\n        note: newNode.content,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges,\n        graph: graph\n      }));\n  }\n  \n  computeItems(id, nodes, edges){\n    /**\n     * Computes the new graph to be \n     */\n    let graph = {nodes: [], edges: []};\n    graph.nodes.push(nodes.find(x => x.id === id));\n    for (let i = 0; i < edges.length; i++) {\n      if(edges[i].from === id){\n        graph.edges.push(edges[i]);\n        graph.nodes.push(nodes.find(x => x.id === edges[i].to));\n      }else if(edges[i].to === id){\n        graph.edges.push(edges[i]);\n        graph.nodes.push(nodes.find(x => x.id === edges[i].from));\n      }\n    }\n    return graph;\n  }\n  \n  addNote(){\n    /**\n     * Adds a new node to the network \n     */\n    console.log(\"add\");\n    let title = \"New Note\"\n    let note = \"What's on your mind?\"\n    let stateCopy = Object.assign({}, this.state);\n    let nodeId = (parseInt(stateCopy.nodes.slice(-1)[0].id) + 1).toString();\n    let edgeId = (parseInt(stateCopy.edges.slice(-1)[0].id) + 1).toString();\n    stateCopy.nodes.push({key: \"node\"+nodeId, id: nodeId, label: title , content: note, created:new Date().getTime()})\n    stateCopy.edges.push({key: \"edge\"+edgeId, id: edgeId, to: nodeId , from: stateCopy.id, created:new Date().getTime()})\n    let graph = this.computeItems(nodeId, stateCopy.nodes, stateCopy.edges);\n    this.setState(state => ({\n        id:nodeId,\n        title: title,\n        note: note,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges,\n        graph: graph\n      }));\n  }\n  \n  resetGraph(){\n    /**\n     * resets the graph and displays all nodes\n     */\n    console.log(\"reset\");\n    // let stateCopy = JSON.parse(JSON.stringify(this.state));\n    let stateCopy = Object.assign({}, this.state);\n    let graph = {nodes:stateCopy.nodes, edges:stateCopy.edges};\n    this.setState(state => ({\n        id:stateCopy.id,\n        title: stateCopy.title,\n        note: stateCopy.note,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges,\n        graph: graph\n      }));\n  }\n  \n  setNote(newNote){\n    /**\n     * Sets the note content of the selected node\n     */\n    console.log(\"set\");\n    // let stateCopy = JSON.parse(JSON.stringify(this.state));\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.nodes.find(x => x.id === stateCopy.id).content = newNote;\n    this.setState(state => ({\n        id:stateCopy.id,\n        title: stateCopy.title,\n        note: newNote,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges,\n        graph: stateCopy.graph\n      }));\n  }\n  \n  setTitle(newTitle){\n    /**\n     * Sets the note label of the selected node \n     */\n    console.log(\"set\");\n    // let stateCopy = JSON.parse(JSON.stringify(this.state));\n    let stateCopy = Object.assign({}, this.state);\n    let nodeCopy = Object.assign({}, this.state.nodes.find(x => x.id === stateCopy.id));\n    stateCopy.nodes.filter(x => x.id != stateCopy.id);\n    stateCopy.nodes.push({id:nodeCopy.id, key:nodeCopy.key, label:newTitle, constent:nodeCopy.content, created:nodeCopy.created});\n    this.setState(state => ({\n        id:stateCopy.id,\n        title: newTitle,\n        note: stateCopy.note,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges,\n        graph: stateCopy.graph\n      }));\n  }\n  \n  render() {\n    /**\n     * Renders the component\n     */\n    return (\n      <div className=\"note-web\">\n        <TopBar key=\"top\"/>\n        <div className=\"main-content\">\n          <LeftBar key=\"left\" getNote={this.getNote} addNote={this.addNote} state={this.state}/>\n          <DataScreen key=\"data\" state={this.state} getNote={this.getNote}/>\n          {/* <GraphWrapper /> */}\n          <NoteScreen key=\"note\" state={this.state} setNote={this.setNote} setTitle={this.setTitle}/>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}