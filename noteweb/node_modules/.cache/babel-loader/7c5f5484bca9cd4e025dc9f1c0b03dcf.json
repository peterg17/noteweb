{"ast":null,"code":"var _jsxFileName = \"/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props); // Don't call this.setState() here!\n\n    this.state = {\n      items: this.props.items\n    };\n    this.network = React.createElement(\"div\", {\n      className: \"datascreen-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(Network, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, this.state.items));\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    /*\n    * Might help propogate state change down to child from parent\n    */\n    if (props.items !== state.items) {\n      console.log(\"poop\");\n      return {\n        items: props.items\n      };\n    }\n\n    console.log(\"peter\");\n    return null;\n  }\n\n  render() {\n    /**\n     * Renders the component\n     */\n    return React.createElement(\"div\", {\n      className: \"datascreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"HELLO\")), this.network);\n  }\n\n}\nDataScreen.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.oneOfType([Node, Edge]))\n};","map":{"version":3,"sources":["/Users/victorfink/Documents/Projects/noteweb/src/DataScreen.js"],"names":["React","Component","ReactDOM","PropTypes","Network","Node","Edge","DataScreen","constructor","props","state","items","network","getDerivedStateFromProps","console","log","render","propTypes","arrayOf","oneOfType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,0CAAP;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,QAAoC,mBAApC;AACA,OAAO,aAAP;AACA,OAAO,sCAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAChD;;;AAGAO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC,KAAKF,KAAL,CAAWE;AAAlB,KAAb;AACA,SAAKC,OAAL,GAAe;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAU,KAAKF,KAAL,CAAWC,KAArB,CAApC,CAAf;AACD;;AAED,SAAOE,wBAAP,CAAgCJ,KAAhC,EAAuCC,KAAvC,EAA8C;AAC5C;;;AAGA,QAAID,KAAK,CAACE,KAAN,KAAgBD,KAAK,CAACC,KAA1B,EAAiC;AAC/BG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAO;AACLJ,QAAAA,KAAK,EAACF,KAAK,CAACE;AADP,OAAP;AAGD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;;;AAGA,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,EAIG,KAAKJ,OAJR,CADF;AAQD;;AArC+C;AAwClDL,UAAU,CAACU,SAAX,GAAuB;AACrBN,EAAAA,KAAK,EAAER,SAAS,CAACe,OAAV,CAAkBf,SAAS,CAACgB,SAAV,CAAoB,CAACd,IAAD,EAAMC,IAAN,CAApB,CAAlB;AADc,CAAvB","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class DataScreen extends Component {\n  /**\n   * This screen displays the network of notes and allows selection of a note to be displayed in the NoteScreen\n   */\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {items:this.props.items};\n    this.network = <div className=\"datascreen-content\"><Network>{this.state.items}</Network></div>;\n  } \n  \n  static getDerivedStateFromProps(props, state) {\n    /*\n    * Might help propogate state change down to child from parent\n    */\n    if (props.items !== state.items) {\n      console.log(\"poop\");\n      return {\n        items:props.items\n      };\n    }\n    console.log(\"peter\");\n    return null;\n  }\n  \n  render() {\n    /**\n     * Renders the component\n     */\n    return (\n      <div className=\"datascreen\">\n        <div>\n          <p>HELLO</p>\n        </div>\n        {this.network}\n      </div>\n    );\n  }\n}\n\nDataScreen.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.oneOfType([Node,Edge]))\n}\n"]},"metadata":{},"sourceType":"module"}