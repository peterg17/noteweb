{"ast":null,"code":"var _jsxFileName = \"/Users/victorfink/Documents/Projects/noteweb/src/NoteWeb.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NoteScreen from './NoteScreen.js';\nimport DataScreen from './DataScreen.js';\nimport TopBar from './TopBar.js';\nimport LeftBar from './LeftBar.js';\nexport default class NoteWeb extends Component {\n  /**\n   * This is the main application. Creates a network of nodes for note taking, rather than a linear set of notes. \n   * Will use machine learning on back end to automatically link notes to each other\n   */\n  constructor(props) {\n    /**\n     * Constructor for Noteweb application. Initializes nodes and edges for graph. initializes the state. binds functions. \n     */\n    super(props);\n    this.state = {\n      id: \"None\",\n      title: \"Title\",\n      note: \"This is where your note is displayed\"\n    };\n    console.log(this.note);\n\n    const Decorator = props => {\n      return React.createElement(\"button\", {\n        onClick: () => this.getNote(props.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Click Me\");\n    }; // let nodes = [\n    //   <Node key=\"vader\" id= \"vader\" label=\"Darth Vader\" decorator={Decorator} content=\"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\"/>,\n    //   <Node key=\"luke\" id= \"luke\" label=\"Luke Skywalker\" decorator={Decorator} content=\"This is the Galaxy's only hope\"/>,\n    //   <Node key=\"leia\" id= \"leia\" label=\"Leia Organa\" decorator={Decorator} content=\"This is the girl who is always counted out but comes up big\"/>,\n    //   <Node key=\"han\" id= \"han\" label=\"Han Solo\" decorator={Decorator} content=\"What is this amateur hour\"/>,\n    //   <Node key=\"chewy\" id= \"chewy\" label=\"Chewbacca\" decorator={Decorator} content=\"Ahhhhhhhhhhhhh\"/>,\n    //   <Node key=\"obi\" id= \"obi\" label=\"Obi-Wan Kenobi\" decorator={Decorator} content=\"Why did you try it Anakin? I had the high ground. And I've used that exact trick on Darth Maul which I must have told you about. Did you think I wouldn't see that shit coming? Come on young padawan.\"/>,\n    //   <Node key=\"greedo\" id= \"greedo\" label=\"Greedo\" decorator={Decorator} content=\"The green guy who was just too slow for Han Solo. Or was I innacurate? Did I shoot or not? Idk George Lucas keeps editing my only scene\"/>,\n    //   <Node key=\"yoda\" id= \"yoda\" label=\"Yoda\" decorator={Decorator} content=\"That baby me am not. Look nothing like him, I did. More handsome I am.\"/>,\n    //   <Node key=\"boba\" id= \"boba\" label=\"Boba Fett\" decorator={Decorator} content=\"Still being digested to this day in The Great Pit of Carkoon\"/>,\n    //   <Node key=\"jabba\" id= \"jabba\" label=\"Jabba The Hutt\" decorator={Decorator} content=\"Me want solo on my wall\"/>,\n    //   <Node key=\"lando\" id= \"lando\" label=\"Lando Calrissian\" decorator={Decorator} content=\"I'm in it for the money, and the women, and the greater good, but definitely the money\"/>,\n    //   <Node key=\"emporer\" id= \"emporer\" label=\"Emporer Palpatine\" decorator={Decorator} content=\"This is the Dark Lord of the Sith\"/>\n    // ];\n    // let edges = [\n    //   <Edge key=\"0\" id= \"0\" from=\"yoda\" to=\"chewy\" />,\n    //   <Edge key=\"1\" id= \"1\" from=\"vader\" to=\"luke\" />,\n    //   <Edge key=\"2\" id= \"2\" from=\"vader\" to=\"leia\" />,\n    //   <Edge key=\"3\" id= \"3\" from=\"han\" to=\"leia\" />,\n    //   <Edge key=\"4\" id= \"4\" from=\"han\" to=\"chewy\" />,\n    //   <Edge key=\"5\" id= \"5\" from=\"obi\" to=\"luke\" />,\n    //   <Edge key=\"6\" id= \"6\" from=\"leia\" to=\"luke\" />,\n    //   <Edge key=\"7\" id= \"7\" from=\"vader\" to=\"obi\" />,\n    //   <Edge key=\"8\" id= \"8\" from=\"obi\" to=\"yoda\" />,\n    //   <Edge key=\"9\" id= \"9\" from=\"vader\" to=\"yoda\" />,\n    //   <Edge key=\"10\" id= \"10\" from=\"jabba\" to=\"han\" />,\n    //   <Edge key=\"11\" id= \"11\" from=\"jabba\" to=\"boba\" />,\n    //   <Edge key=\"12\" id= \"12\" from=\"boba\" to=\"han\" />,\n    //   <Edge key=\"13\" id= \"13\" from=\"han\" to=\"greedo\" />,\n    //   <Edge key=\"14\" id= \"14\" from=\"jabba\" to=\"greedo\" />,\n    //   <Edge key=\"15\" id= \"15\" from=\"yoda\" to=\"luke\" />,\n    //   <Edge key=\"16\" id= \"16\" from=\"emporer\" to=\"vader\" />,\n    //   <Edge key=\"17\" id= \"17\" from=\"emporer\" to=\"luke\" />,\n    //   <Edge key=\"18\" id= \"18\" from=\"lando\" to=\"han\" />\n    // ];\n\n\n    let nodes = [{\n      key: \"vader\",\n      id: \"vader\",\n      label: \"Darth Vader\",\n      content: \"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\"\n    }, {\n      key: \"luke\",\n      id: \"luke\",\n      label: \"Luke Skywalker\",\n      content: \"This is the Galaxy's only hope.\"\n    }, {\n      key: \"leia\",\n      id: \"leia\",\n      label: \"Leia Organa\",\n      content: \"This is the girl who is always counted out but comes up big.\"\n    }, {\n      key: \"han\",\n      id: \"han\",\n      label: \"Han Solo\",\n      content: \"What is this amateur hour?\"\n    }];\n    let edges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 1,\n      to: 3\n    }, {\n      from: 2,\n      to: 4\n    }, {\n      from: 2,\n      to: 5\n    }];\n    let items = [];\n    items.push(nodes.find(x => x.id === 1));\n\n    for (let i = 0; i < edges.length; i++) {\n      console.log(edges[i]);\n\n      if (edges[i].from === 1) {\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].to));\n      } else if (edges[i].to === 1) {\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].from));\n      }\n    } // let items = [];\n    // items.push(nodes.find(x => x.props.id === \"vader\"));\n    // for (let i = 0; i < edges.length; i++) {\n    //   console.log(edges[i]);\n    //   if(edges[i].props.from === \"vader\"){\n    //     items.push(edges[i]);\n    //     items.push(nodes.find(x => x.props.id === edges[i].props.to));\n    //   }else if(edges[i].props.to === \"vader\"){\n    //     items.push(edges[i]);\n    //     items.push(nodes.find(x => x.props.id === edges[i].props.from));\n    //   }\n    // }\n\n\n    let thisItem = items[0];\n    console.log(\"items\");\n    console.log(items);\n    this.state = {\n      id: thisItem.id,\n      title: thisItem.label,\n      note: thisItem.content,\n      nodes: nodes,\n      edges: edges,\n      items: items,\n      graph: {\n        nodes: nodes,\n        edges: edges\n      }\n    }; // this.state = {id: thisItem.props.id,  title: thisItem.props.label, note: thisItem.props.content, nodes: nodes, edges: edges, items:items, graph:{nodes:nodes, edges:edges}};\n\n    this.setNote = this.setNote.bind(this);\n    this.getNote = this.getNote.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.computeItems = this.computeItems.bind(this);\n    console.log(this.state);\n  }\n\n  getNote(newId) {\n    /**\n     * Retreives the contents of a note and displays the contents in the NoteScreen \n     */\n    console.log(\"get\");\n    let stateCopy = JSON.parse(JSON.stringify(this.state));\n    console.log(stateCopy);\n    let newNode = stateCopy.nodes.find(x => x.id === newId);\n    let items = this.computeItems(newId, stateCopy.nodes, stateCopy.edges);\n    console.log(items);\n    this.setState(state => ({\n      id: newNode.id,\n      title: newNode.label,\n      note: newNode.content,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges,\n      items: items\n    }));\n  }\n\n  computeItems(id, nodes, edges) {\n    /**\n     * Computes the new items to be \n     */\n    let items = [];\n    items.push(nodes.find(x => x.id === id));\n\n    for (let i = 0; i < edges.length; i++) {\n      if (edges[i].from === id) {\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].to));\n      } else if (edges[i].to === id) {\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].from));\n      }\n    }\n\n    return items;\n  }\n\n  addNote(title) {\n    /**\n     * Adds a new node to the network \n     */\n    console.log(\"add\");\n    let stateCopy = JSON.parse(JSON.stringify(this.state));\n    console.log(title);\n  }\n\n  setNote(newNote) {\n    /**\n     * Adds a new node to the network \n     */\n    let stateCopy = JSON.parse(JSON.stringify(this.state));\n    stateCopy.nodes.find(x => x.id === stateCopy.id).content = newNote; // console.log(stateCopy);\n\n    this.setState(state => ({\n      id: stateCopy.id,\n      title: stateCopy.title,\n      note: newNote,\n      nodes: stateCopy.nodes,\n      edges: stateCopy.edges\n    }));\n  }\n\n  render() {\n    /**\n     * Renders the component\n     */\n    return React.createElement(\"div\", {\n      className: \"note-web\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(TopBar, {\n      key: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"main-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(LeftBar, {\n      key: \"left\",\n      getNote: this.getNote,\n      addNote: this.addNote,\n      state: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(DataScreen, {\n      key: \"data\",\n      state: this.state,\n      getNote: this.getNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(NoteScreen, {\n      key: \"note\",\n      state: this.state,\n      setNote: this.setNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/victorfink/Documents/Projects/noteweb/src/NoteWeb.js"],"names":["React","Component","Network","Node","Edge","NoteScreen","DataScreen","TopBar","LeftBar","NoteWeb","constructor","props","state","id","title","note","console","log","Decorator","getNote","nodes","key","label","content","edges","from","to","items","push","find","x","i","length","thisItem","graph","setNote","bind","addNote","computeItems","newId","stateCopy","JSON","parse","stringify","newNode","setState","newNote","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NoteScreen from './NoteScreen.js'\nimport DataScreen from './DataScreen.js'\nimport TopBar from './TopBar.js'\nimport LeftBar from './LeftBar.js'\n\nexport default class NoteWeb extends Component {\n  /**\n   * This is the main application. Creates a network of nodes for note taking, rather than a linear set of notes. \n   * Will use machine learning on back end to automatically link notes to each other\n   */\n  constructor(props) {\n  /**\n   * Constructor for Noteweb application. Initializes nodes and edges for graph. initializes the state. binds functions. \n   */\n    super(props);\n    this.state = {id: \"None\",  title: \"Title\", note: \"This is where your note is displayed\"};\n    console.log(this.note)\n    const Decorator = props => {\n      return (\n        <button\n          onClick={() => this.getNote(props.id)}\n        >\n          Click Me\n        </button>\n      );\n    };\n    // let nodes = [\n    //   <Node key=\"vader\" id= \"vader\" label=\"Darth Vader\" decorator={Decorator} content=\"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\"/>,\n    //   <Node key=\"luke\" id= \"luke\" label=\"Luke Skywalker\" decorator={Decorator} content=\"This is the Galaxy's only hope\"/>,\n    //   <Node key=\"leia\" id= \"leia\" label=\"Leia Organa\" decorator={Decorator} content=\"This is the girl who is always counted out but comes up big\"/>,\n    //   <Node key=\"han\" id= \"han\" label=\"Han Solo\" decorator={Decorator} content=\"What is this amateur hour\"/>,\n    //   <Node key=\"chewy\" id= \"chewy\" label=\"Chewbacca\" decorator={Decorator} content=\"Ahhhhhhhhhhhhh\"/>,\n    //   <Node key=\"obi\" id= \"obi\" label=\"Obi-Wan Kenobi\" decorator={Decorator} content=\"Why did you try it Anakin? I had the high ground. And I've used that exact trick on Darth Maul which I must have told you about. Did you think I wouldn't see that shit coming? Come on young padawan.\"/>,\n    //   <Node key=\"greedo\" id= \"greedo\" label=\"Greedo\" decorator={Decorator} content=\"The green guy who was just too slow for Han Solo. Or was I innacurate? Did I shoot or not? Idk George Lucas keeps editing my only scene\"/>,\n    //   <Node key=\"yoda\" id= \"yoda\" label=\"Yoda\" decorator={Decorator} content=\"That baby me am not. Look nothing like him, I did. More handsome I am.\"/>,\n    //   <Node key=\"boba\" id= \"boba\" label=\"Boba Fett\" decorator={Decorator} content=\"Still being digested to this day in The Great Pit of Carkoon\"/>,\n    //   <Node key=\"jabba\" id= \"jabba\" label=\"Jabba The Hutt\" decorator={Decorator} content=\"Me want solo on my wall\"/>,\n    //   <Node key=\"lando\" id= \"lando\" label=\"Lando Calrissian\" decorator={Decorator} content=\"I'm in it for the money, and the women, and the greater good, but definitely the money\"/>,\n    //   <Node key=\"emporer\" id= \"emporer\" label=\"Emporer Palpatine\" decorator={Decorator} content=\"This is the Dark Lord of the Sith\"/>\n    // ];\n    // let edges = [\n    //   <Edge key=\"0\" id= \"0\" from=\"yoda\" to=\"chewy\" />,\n    //   <Edge key=\"1\" id= \"1\" from=\"vader\" to=\"luke\" />,\n    //   <Edge key=\"2\" id= \"2\" from=\"vader\" to=\"leia\" />,\n    //   <Edge key=\"3\" id= \"3\" from=\"han\" to=\"leia\" />,\n    //   <Edge key=\"4\" id= \"4\" from=\"han\" to=\"chewy\" />,\n    //   <Edge key=\"5\" id= \"5\" from=\"obi\" to=\"luke\" />,\n    //   <Edge key=\"6\" id= \"6\" from=\"leia\" to=\"luke\" />,\n    //   <Edge key=\"7\" id= \"7\" from=\"vader\" to=\"obi\" />,\n    //   <Edge key=\"8\" id= \"8\" from=\"obi\" to=\"yoda\" />,\n    //   <Edge key=\"9\" id= \"9\" from=\"vader\" to=\"yoda\" />,\n    //   <Edge key=\"10\" id= \"10\" from=\"jabba\" to=\"han\" />,\n    //   <Edge key=\"11\" id= \"11\" from=\"jabba\" to=\"boba\" />,\n    //   <Edge key=\"12\" id= \"12\" from=\"boba\" to=\"han\" />,\n    //   <Edge key=\"13\" id= \"13\" from=\"han\" to=\"greedo\" />,\n    //   <Edge key=\"14\" id= \"14\" from=\"jabba\" to=\"greedo\" />,\n    //   <Edge key=\"15\" id= \"15\" from=\"yoda\" to=\"luke\" />,\n    //   <Edge key=\"16\" id= \"16\" from=\"emporer\" to=\"vader\" />,\n    //   <Edge key=\"17\" id= \"17\" from=\"emporer\" to=\"luke\" />,\n    //   <Edge key=\"18\" id= \"18\" from=\"lando\" to=\"han\" />\n    // ];\n    let nodes = [\n      { key: \"vader\", id: \"vader\", label: \"Darth Vader\", content: \"The chosen one. Brought balance to the force. Before me thousands of Jedi, only two Sith. After me, two Jedi and two Sith. That's what you call balanced.\"},\n      { key: \"luke\", id: \"luke\", label: \"Luke Skywalker\" , content: \"This is the Galaxy's only hope.\" },\n      { key: \"leia\", id: \"leia\", label: \"Leia Organa\", content: \"This is the girl who is always counted out but comes up big.\"},\n      { key: \"han\", id: \"han\", label: \"Han Solo\" , content: \"What is this amateur hour?\" },\n    ]\n    \n    let edges = [\n      { from: 1, to: 2 },\n      { from: 1, to: 3 },\n      { from: 2, to: 4 },\n      { from: 2, to: 5 }\n    ]\n    let items = [];\n    items.push(nodes.find(x => x.id === 1));\n    for (let i = 0; i < edges.length; i++) {\n      console.log(edges[i]);\n      if(edges[i].from === 1){\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].to));\n      }else if(edges[i].to === 1){\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].from));\n      }\n    }\n    // let items = [];\n    // items.push(nodes.find(x => x.props.id === \"vader\"));\n    // for (let i = 0; i < edges.length; i++) {\n    //   console.log(edges[i]);\n    //   if(edges[i].props.from === \"vader\"){\n    //     items.push(edges[i]);\n    //     items.push(nodes.find(x => x.props.id === edges[i].props.to));\n    //   }else if(edges[i].props.to === \"vader\"){\n    //     items.push(edges[i]);\n    //     items.push(nodes.find(x => x.props.id === edges[i].props.from));\n    //   }\n    // }\n    let thisItem = items[0];\n    console.log(\"items\");\n    console.log(items);\n    this.state = {id: thisItem.id,  title: thisItem.label, note: thisItem.content, nodes: nodes, edges: edges, items:items, graph:{nodes:nodes, edges:edges}};\n    // this.state = {id: thisItem.props.id,  title: thisItem.props.label, note: thisItem.props.content, nodes: nodes, edges: edges, items:items, graph:{nodes:nodes, edges:edges}};\n    this.setNote = this.setNote.bind(this);\n    this.getNote = this.getNote.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.computeItems = this.computeItems.bind(this);\n    console.log(this.state);\n  }\n  \n  getNote(newId){\n    /**\n     * Retreives the contents of a note and displays the contents in the NoteScreen \n     */\n    console.log(\"get\")\n    let stateCopy = JSON.parse(JSON.stringify(this.state));\n    console.log(stateCopy);\n    let newNode = stateCopy.nodes.find(x => x.id === newId);\n    let items = this.computeItems(newId, stateCopy.nodes, stateCopy.edges);\n    console.log(items);\n    this.setState(state => ({\n        id:newNode.id,\n        title: newNode.label,\n        note: newNode.content,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges,\n        items: items\n      }));\n  }\n  \n  computeItems(id, nodes, edges){\n    /**\n     * Computes the new items to be \n     */\n    let items = [];\n    items.push(nodes.find(x => x.id === id));\n    for (let i = 0; i < edges.length; i++) {\n      if(edges[i].from === id){\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].to));\n      }else if(edges[i].to === id){\n        items.push(edges[i]);\n        items.push(nodes.find(x => x.id === edges[i].from));\n      }\n    }\n    return items;\n  }\n  \n  addNote(title){\n    /**\n     * Adds a new node to the network \n     */\n    console.log(\"add\")\n    let stateCopy = JSON.parse(JSON.stringify(this.state));\n    console.log(title);\n  }\n  \n  setNote(newNote){\n    /**\n     * Adds a new node to the network \n     */\n    let stateCopy = JSON.parse(JSON.stringify(this.state));\n    stateCopy.nodes.find(x => x.id === stateCopy.id).content = newNote;\n    // console.log(stateCopy);\n    this.setState(state => ({\n        id:stateCopy.id,\n        title: stateCopy.title,\n        note: newNote,\n        nodes: stateCopy.nodes,\n        edges: stateCopy.edges\n      }));\n  }\n  \n  render() {\n    /**\n     * Renders the component\n     */\n    return (\n      <div className=\"note-web\">\n        <TopBar key=\"top\"/>\n        <div className=\"main-content\">\n          <LeftBar key=\"left\" getNote={this.getNote} addNote={this.addNote} state={this.state}/>\n          <DataScreen key=\"data\" state={this.state} getNote={this.getNote}/>\n          <NoteScreen key=\"note\" state={this.state} setNote={this.setNote}/>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}